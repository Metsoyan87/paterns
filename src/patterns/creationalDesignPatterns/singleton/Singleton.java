package patterns.creationalDesignPatterns.singleton;

//Шаблон проектирования Singleton — это шаблон проектирования в объектно-ориентированном программировании,
// который гарантирует наличие у класса только одного экземпляра, обеспечивая при этом глобальную точку доступа к этому экземпляру.
// В Java это можно реализовать, сделав конструктор класса закрытым и создав статический метод, который возвращает экземпляр класса,
// который создает экземпляр, если он еще не создан, и возвращает существующий экземпляр, если он уже создан. .
// Экземпляр обычно хранится как частное статическое поле внутри класса. Вот простой пример на Java:

public class Singleton {
    private static Singleton instance;

    private Singleton() {
        // private constructor to prevent instantiation
    }

    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}

//В этом примере класс Singleton имеет закрытый конструктор,
// предотвращающий создание его экземпляра другими классами. Метод getInstance создает
// экземпляр класса Singleton, если он еще не существует, и возвращает его. Это гарантирует,
// что в приложении будет только один экземпляр класса Singleton.