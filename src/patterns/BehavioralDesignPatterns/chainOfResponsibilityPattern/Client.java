package patterns.BehavioralDesignPatterns.chainOfResponsibilityPattern;


//Шаблон цепочки ответственности — это поведенческий шаблон проектирования,
// который позволяет нескольким объектам обрабатывать запрос, не зная,
// кто является отправителем или получателем запроса.
// Это альтернатива традиционному способу обработки запросов путем создания прямой связи между отправителем и получателем.

//В Java этот шаблон можно реализовать с помощью интерфейсов и наследования.
// Вот пример того, как реализовать шаблон цепочки ответственности в Java:

public class Client {
    public static void main(String[] args) {
        Handler handler1 = new ConcreteHandler1();
        Handler handler2 = new ConcreteHandler2();
        handler1.setNextHandler(handler2);

        handler1.handleRequest(15);
        handler1.handleRequest(25);
    }
}

//В этом примере класс Client создает цепочку ответственности,
// в которой каждый обработчик отвечает за обработку определенного типа запроса.
// Метод handleRequest вызывается у первого обработчика, который затем передает запрос
// следующему обработчику до тех пор, пока запрос не будет обработан последним обработчиком в цепочке.